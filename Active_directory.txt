Analysis

This algorithm uses recursion to go through all the groups present within a group
to find out whether a particular
user is present or not. The function return False if its not there and True if 
the user is present.

Time complexity: The time complexity is quadratic O(n * m) where n is the number of
users and m is the number of subgroups when we do recursion
Space complexity: The space complexity is quadratic O(n * m) where n is the depth 
of recursion and m is the space each recursive call function occupies. The other 
space complexity to consider is that which comes from the two lists - users and 
groups - which is linear O(n) where n is the input size because the size of the 
lists scales proportionally to the size of the input. Combining these two results 
in 0(n * m + 2n). However following the Big-O rule of dropping non-dominant terms 
(less dominant terms in Big-O are negligible with large input sizes), the time 
complexity can be simplified to O(n * m).

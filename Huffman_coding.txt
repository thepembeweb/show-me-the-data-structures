Analysis

This algorithm uses a tree implementation integrated with a dictionary to store the letters 
and their frequencies as key and value pairs.

Sorting was key to this implementation and this was done using an array containing the keys 
which was then sorted.

The tree enabled the derivation of the codes for each distinct letter and the letters and 
codes are also stored as a key value pair in a dictionary for easy access.

Time complexity: The time complexity is superlinear O(n * nlogn) because the create_tree() 
is a recursive function and is called for each element in the sorted_list for the 
worst-case. So, this along with the use of sorted() function on each call makes the 
worst-case time complexity of this function as O(n * nlogn).

Space complexity: The space complexity is linear O(n) where n is the input size because 
the size of the underlying array scales proportionally to the size of the input.
